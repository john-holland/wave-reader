version: '3.8'

services:
  # Wave Reader Backend
  wave-reader-backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "9464:9464"  # Prometheus metrics port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - PROMETHEUS_PORT=9464
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - jaeger
      - prometheus
    networks:
      - wave-reader-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # UDP collector
      - "6832:6832/udp"  # UDP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - wave-reader-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wave-reader-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - wave-reader-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Redis for caching (optional)
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wave-reader-network
    restart: unless-stopped

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=wave_reader
      - POSTGRES_USER=wave_reader
      - POSTGRES_PASSWORD=wave_reader_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - wave-reader-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  postgres_data:

networks:
  wave-reader-network:
    driver: bridge
